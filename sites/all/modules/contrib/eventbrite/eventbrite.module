<?php

/**
 * @file
 * Module file for the Eventbrite module.
 */

/**
 * Implements hook_menu().
 */
function eventbrite_menu() {

  $items['admin/config/services/eventbrite'] = array(
    'title' => 'Eventbrite Configuration',
    'description' => 'Configure Eventbrite settings & objects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite.admin.inc',
  );

  $items['admin/config/services/eventbrite/api'] = array(
    'title' => 'API Settings',
    'description' => 'Configure Eventbrite API settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'title' => 'API Settings',
  );

  $items['admin/config/services/eventbrite/organizers'] = array(
    'title' => 'Organizers',
    'description' => 'List Eventbrite organizers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_organizer_list_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer eventbrite settings'),
    'file' => 'eventbrite.organizer.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/config/services/eventbrite/organizers/list'] = array(
    'title' => 'List Organizers',
    'description' => 'List Eventbrite organizers',
    'access callback' => 'user_access',
    'access arguments' => array('administer eventbrite settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/services/eventbrite/organizers/add'] = array(
    'title' => 'Add an Organizer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_organizer'),
    'access callback' => 'user_access',
    'access arguments' => array('administer eventbrite settings'),
    'file' => 'eventbrite.organizer.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/config/services/eventbrite/organizers/%'] = array(
    'title' => 'Edit this Organizer',
    'description' => 'Edit an Eventbrite organizer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_organizer', 5),
    'access callback' => 'is_numeric',
    'access arguments' => array(5),
    'file' => 'eventbrite.organizer.inc',
    'type' => MENU_CALLBACK,
    'weight' => 3,
  );

  // VENUES.

  $items['admin/config/services/eventbrite/venues'] = array(
    'title' => 'Venues',
    'description' => 'List Eventbrite venues',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue_list_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer eventbrite settings'),
    'file' => 'eventbrite.venue.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/config/services/eventbrite/venues/list'] = array(
    'title' => 'List Venues',
    'description' => 'List Eventbrite venues',
    'access callback' => 'user_access',
    'access arguments' => array('administer eventbrite settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/services/eventbrite/venues/add'] = array(
    'title' => 'Add a Venue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue'),
    'access callback' => 'user_access',
    'access arguments' => array('administer eventbrite settings'),
    'file' => 'eventbrite.venue.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/config/services/eventbrite/venues/%'] = array(
    'title' => 'Edit this Venue',
    'description' => 'Edit an Eventbrite venue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue', 5),
    'access callback' => 'is_numeric',
    'access arguments' => array(5),
    'file' => 'eventbrite.venue.inc',
    'type' => MENU_CALLBACK,
    'weight' => 3,
  );

  $items['admin/config/services/eventbrite/payment-settings'] = array(
    'title' => 'Payment Settings',
    'description' => 'Configure default payment settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_payment_default_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'eventbrite.payment.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}


/**
 * Implements hook_libraries_info().
 */
function eventbrite_libraries_info() {
  // A very simple library. No changing APIs (hence, no versions), no variants.
  $libraries['eventbrite'] = array(
    'name' => 'Eventbrite API library',
    'vendor url' => 'http://developer.eventbrite.com/doc/libraries',
    'download url' => 'https://github.com/ryanjarvinen/eventbrite.php',
    'files' => array(
      'php' => array('Eventbrite.php'),
    ),
    'version' => '1.0',
  );

  return $libraries;
}

/**
 * Implements hook_permission().
 */
function eventbrite_permission() {
  return array(
    'administer eventbrite settings' => array(
      'title' => t('administer eventbrite settings'),
      'description' => t('Gives full control over the eventbrite admin page'),
    ),
    'administer eventbrite venues' => array(
      'title' => t('administer eventbrite venues'),
      'description' => t('allows users to configure eventbrite venues'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function eventbrite_theme() {
  return array(
    'eventbrite_venue_list_form' => array(
      'render element' => 'form',
      'file' => 'eventbrite.venue.inc',
    ),
    'eventbrite_organizer_list_form' => array(
      'render element' => 'form',
      'file' => 'eventbrite.organizer.inc',
    ),
  );
}

// API FUNCTIONS EXPOSED TO OTHER MODULES.

/**
 * Allows a get-oriented operation to called via the Eventbrite API.
 *
 * @param string $op
 *   The get operation to perform. Allowed operations:
 *   - user_list_events
 *   - user_list_venues
 *   - user_list_organizers
 *   - event_get
 *   - user_get
 *   - user_get_by_email
 *   - user_get_by_id
 *   - user_get_by_key
 *
 * @param string|int $id
 *   For the operations user_get_by_email, the user email; for user_get_by_id
 *   and user_get_by_key, the user key.
 */
function eventbrite_get($op, $id = NULL) {
  // Try to load the library and check if that worked.
  module_load_include('inc', 'eventbrite', 'eventbrite.api');
  switch ($op) {
    case 'user_list_events':
      return _eventbrite_api_get_events();

    case 'user_list_venues':
      return _eventbrite_api_get_venues();

    case 'user_list_organizers':
      return _eventbrite_api_get_organizers();

    case 'event_get':
      if ($id) {
        return _eventbrite_api_get_event($id);
      }
      break;

    case 'user_get':
      // This will ge the master user.
      return _eventbrite_api_get_user();

    case 'user_get_by_email':
      if ($id) {
        return _eventbrite_api_get_user($id, 'email');
      }
    case 'user_get_by_id':
      if ($id) {
        return _eventbrite_api_get_user($id, 'user_id');
      }
      break;

    case 'user_get_by_key':
      if ($id) {
        return _eventbrite_api_get_user($id, 'user_key');
      }
      break;
  }
}

/**
 * Allows a save-oriented operation to called via the Eventbrite API.
 *
 * @param string $op
 *   The get operation to perform. Allowed operations:
 *   - event_new
 *   - event_update
 *   - organizer_new
 *   - organizer_update
 *   - payment_update
 *   - ticket_new
 *   - ticket_update
 *   - user_new
 *   - venue_new
 *   - venue_update
 *
 * @param object $object
 *   The event, organizer, payment, ticket, user, or venue object, as
 *   appropriate.
 */
function eventbrite_save($op, $object) {
  module_load_include('inc', 'eventbrite', 'eventbrite.api');
  switch ($op) {
    case 'event_new':
      return _eventbrite_api_event_new($object);

    case 'event_update':
      return _eventbrite_api_event_update($object);

    case 'organizer_new':
      return _eventbrite_api_organizer_new($object);

    case 'organizer_update':
      return _eventbrite_api_organizer_update($object);

    case 'payment_update':
      return _eventbrite_api_payment_update($object);

    case 'ticket_new':
      return _eventbrite_api_ticket_new($object);

    case 'ticket_update':
      return _eventbrite_api_ticket_update($object);

    case 'user_new':
      return _eventbrite_api_user_new($object);

    case 'venue_new':
      return _eventbrite_api_venue_new($object);

    case 'venue_update':
      return _eventbrite_api_venue_update($object);
  }
}

/**
 * Translates timezone offset into the formatting that Eventbrite API expects.
 *
 * @param int $offset
 *   The timezone offset.
 */
function eventbrite_timezone_offset($offset) {
  $eb_timezone = 'GMT';
  $eb_timezone .= ($offset < 0) ? '-' : '+';
  $eb_timezone .= (abs($offset) >= 10) ? abs($offset) : '0' . abs($offset);

  return $eb_timezone;
}

/**
 * Returns Eventbrite's API user_list_events suitable for option lists.
 *
 * @param mixed $id
 *   The event ID for an event that must not be filtered.
 * @param bool $allow_historical
 *   Whether or not events that start prior to the current time should
 *   be returned.
 *
 * @return array
 *   An array of event titles keyed by event ID.
 */
function eventbrite_get_events_options($id = NULL, $allow_historical = FALSE) {
  $options = array();
  if ($events = eventbrite_get('user_list_events')) {
    $options[0] = '';
    foreach ($events as $event_id => $event) {
      if (($id == $event_id) || $allow_historical) {
        $options[$event_id] = $event->title;
      }
      else {
        $start_date_ts = date_convert($event->start_date, DATE_DATETIME, DATE_UNIX, $event->timezone);
        if ($start_date_ts > REQUEST_TIME) {
          $options[$event_id] = $event->title;
        }
      }
    }
  }
  return $options;
}

/**
 * Check if Eventbrite authentication is valid.
 *
 * @return bool
 *   TRUE if the Eventbrite module is set up with valid Eventbrite
 *   authentication.
 */
function eventbrite_is_valid_auth() {
  return variable_get('eventbrite_is_valid_auth', FALSE);
}
