<?php

// TODO: Add eventbrite_og_requirements (copy from Eventbrite Blocks)

// Selective groups states. chosen by the group admin
define('EVENTBRITE_OG_DISABLED', 0);
define('EVENTBRITE_OG_CUSTOM', 1);
define('EVENTBRITE_OG_SUBUSER', 2);

/**
 * Implements hook_permissions().
 */
function eventbrite_og_permission() {
  return array(
    'administer eventbrite group accounts' => array(
      'title' => t('administer eventbrite group accounts'),
      'description' => t('TODO Add a description for \'administer eventbrite group accounts\''),
    ),
  );
}

/**
 * Implements hook_nodeapi().
 */
function eventbrite_og_nodeapi_OLD(&$node, $op, $teaser = NULL, $page = NULL) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  // If this node is a group type
  if (og_is_group_type($node->type)) {
    switch ($op) {
      case 'load':
        $node->eventbrite_og_enabled = 0;
        $node->eventbrite_og_user_key = '';
        $node->eventbrite_og_enabled_organizers = array();
        $node->eventbrite_og_enabled_venues = array();
        $node->eventbrite_og_default_payment_settings = array();

        $result = db_query('SELECT * FROM {eventbrite_og} WHERE nid = :nid', array(':nid' => $node->nid));
        if ($row = db_fetch_object($result)) {
          $node->eventbrite_og_enabled = $row->eventbrite_og_enabled;
          $node->eventbrite_og_user_key = $row->eventbrite_og_user_key;
          if ($row->default_payment_settings) {
            $node->eventbrite_og_default_payment_settings = unserialize((string) $row->default_payment_settings);

            if (!isset($node->eventbrite_og_default_payment_settings['allow_payment_override'])) {
              $node->eventbrite_og_default_payment_settings['allow_payment_override'] = 1;
            }
            if (!isset($node->eventbrite_og_default_payment_settings['autocreate_payment'])) {
              $node->eventbrite_og_default_payment_settings['autocreate_payment'] = 0;
            }
          }

          switch ($node->eventbrite_og_enabled) {
            case EVENTBRITE_OG_CUSTOM:
              // Fill in organizers from custom key--this will likely require hitting the Eventbrite server
              $custom_organizers = eventbrite_get('user_list_organizers');
              $node->eventbrite_og_enabled_organizers;
              break;
            case EVENTBRITE_OG_SUBUSER:
              if (module_exists('eventbrite_subuser')) {
                // TODO: Fill in organizer from subuser
                $subuser = eventbrite_subuser_load($node->eventbrite_og_user_key, 'user_key');

                $node->eventbrite_og_enabled_organizers = $subuser->enabled_organizers;
                $node->eventbrite_og_enabled_venues = $subuser->enabled_venues;
              }
              break;
          }
        }
        break;

      case 'prepare':
        break;

      case 'insert':
      case 'update':
        _eventbrite_og_group_submit($node);
        break;

      case 'delete':
        // TODO: If group is deleted, should delete eventbrite_og
        break;
    }
  }
}

/*
 * This is in a function so that it's easier to hack later
 */
function _eventbrite_og_auth_methods() {
  $options = array(
    EVENTBRITE_OG_CUSTOM => t('Allow site admins to enter a user key for the group to authenticate with Eventbrite'),
  );
  if (module_exists('eventbrite_subuser')) {
    $options[EVENTBRITE_OG_SUBUSER] = t('Allow site admins to select a subuser for authentication (from primary account subusers)');
  }
  return $options;
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_og_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $type = $form['#node_type']->type;

  if (og_is_group_type($type)) {
    // This is a group type so add form elements for eventbrite_og
    $form['og']['eventbrite_og_auth_method'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Eventbrite authentication methods for Organic Groups integration '),
      '#options' => _eventbrite_og_auth_methods(),
      '#default_value' => variable_get('eventbrite_og_auth_method_' . $type, array()),
      '#description' => t('You must select at least one of these authentication methods to enable Eventbrite integration for this group type'),
      '#weight' => 10,
    );

    $form['#submit'][] = 'eventbrite_og_node_type_form_submit';
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_og_node_type_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $auth_methods = array();
  foreach ($form_values['eventbrite_og_auth_method'] as $key => $value) {
    if ($value) {
      $auth_methods[$key] = $key;
    }
  }
  variable_set('eventbrite_og_auth_method_' . $form_values['type'], $auth_methods);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_og_get_account_options($type) {
  $account_options = array();

  if ($allowed_options = variable_get('eventbrite_og_auth_method_' . $type, array())) {
    $account_options[EVENTBRITE_OG_DISABLED] = t('Do not enable Eventbrite integration for this group');
    if ($allowed_options[EVENTBRITE_OG_CUSTOM]) {
      $account_options[EVENTBRITE_OG_CUSTOM] = t('Enter an Eventbrite user key to use as the Eventbrite account');
    }
    if (module_exists('eventbrite_subuser')) {
      if ($allowed_options[EVENTBRITE_OG_SUBUSER]) {
        $account_options[EVENTBRITE_OG_SUBUSER] = t('Create a subuser account under the primary Eventbrite account');
      }
    }
  }

  return $account_options;
}

//function eventbrite_og_form_alter(&$form, &$form_state, $form_id) {
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_og_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node'])) {
    $node = $form['#node'];
    if ($form_id == $node->type . '_node_form' && og_is_group_type($node->type)) {
      if ($allowed_auth_methods = variable_get('eventbrite_og_auth_method_' . $node->type, array())) {
        if (user_access('administer eventbrite group accounts')) {
          drupal_add_js(drupal_get_path('module', 'eventbrite_og')  . '/eventbrite_og.js');

          $form['eventbrite_og'] = array(
            '#type' => 'fieldset',
            '#title' => t('Eventbrite Settings'),
          );

          $form['eventbrite_og']['eventbrite_og_enabled'] = array(
            '#type' => 'radios',
            '#title' => t('Eventbrite Groups Integration'),
            '#options' => eventbrite_og_get_account_options($node->type),
            '#required' => 1,
            '#default_value' => $node->eventbrite_og_enabled,
            '#attributes' => array('class' => 'eventbrite_og-enabled'),
          );

          if (isset($allowed_auth_methods[EVENTBRITE_OG_CUSTOM])) {
            $form['eventbrite_og']['eventbrite_og_user_key'] = array(
              '#type' => 'textfield',
              '#title' => t('User key'),
              // TODO: get link for user key
              '#description' => t('Please enter the user key to use for Eventbrite integration within this group.  You can find the user key at ...'),
              '#default_value' => (EVENTBRITE_OG_CUSTOM == $node->eventbrite_og_enabled) ? $node->eventbrite_og_user_key : '',
              '#attributes' => array('class' => 'eventbrite_og-user-key'),
            );
          }

          if (isset($allowed_auth_methods[EVENTBRITE_OG_SUBUSER])) {
            if (module_exists('eventbrite_subuser')) {
              $subuser_emails = array_values(eventbrite_subuser_get_enabled());

              $form['eventbrite_og']['eventbrite_subuser_email'] = array(
                '#type' => 'select',
                '#title' => t('Subuser Account'),
                '#options' => array_combine($subuser_emails, $subuser_emails),
                '#description' => t('Please select the subuser account to use for Eventbrite integration within this group.'),
                '#default_value' => eventbrite_subuser_get_email($node->eventbrite_og_user_key),
                '#attributes' => array('class' => 'eventbrite_og-user-key'),
              );
            }
          }

          module_load_include('inc', 'eventbrite', 'eventbrite.payment');

          $form['eventbrite_og']['default_payment_settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('Default payment settings for Chapter Events'),
          );

          $form['eventbrite_og']['default_payment_settings']['eventbrite_payment_settings'] = array(
            '#type' => 'value',
            '#value' => 1,
          );

          $form['eventbrite_og']['default_payment_settings'] += eventbrite_payment_settings_form($node->eventbrite_og_default_payment_settings, 1);
          $form['eventbrite_og']['default_payment_settings']['eventbrite_allow_payment_override']['#description'] = t('Allow users to override the payment settings per group or per event');

          $form['#validate'][] = 'eventbrite_og_group_node_validate';
        }
        else {
          if ($node->eventbrite_og_default_payment_settings['allow_payment_override']) {
            $form['eventbrite_og']['default_payment_settings'] = array(
              '#type' => 'fieldset',
              '#title' => t('Default payment settings for Chapter Events'),
            );

            $form['eventbrite_og']['default_payment_settings']['eventbrite_payment_settings'] = array(
              '#type' => 'value',
              '#value' => 1,
            );

            $form['eventbrite_og']['default_payment_settings'] += eventbrite_payment_settings_form($node->eventbrite_og_default_payment_settings);

            $form['#validate'][] = 'eventbrite_og_group_node_validate';
          }
        }
      }
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_og_group_node_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  if ($form_values['eventbrite_og_enabled']) {

    $node = $form['#node'];
    if ($allowed_auth_methods = variable_get('eventbrite_og_auth_method_' . $node->type, array())) {
      if (isset($allowed_auth_methods[$form_values['eventbrite_og_enabled']])) {
        if (EVENTBRITE_OG_CUSTOM == $form_values['eventbrite_og_enabled']) {
          if (empty($form_values['eventbrite_og_user_key'])) {
            form_set_error('eventbrite_og_user_key', t('You must enter a user key for the group account to enable Eventbrite integration.'));
          }
          if (!eventbrite_get('user_get_by_key', $form_values['eventbrite_og_user_key'])) {
            form_set_error('eventbrite_og_user_key', t('The Eventbrite API is not accepting that user key.'));
            return;
          }
        }
        if (EVENTBRITE_OG_SUBUSER == $form_values['eventbrite_og_enabled']) {
          if (module_exists('eventbrite_subuser')) {
            if (empty($form_values['eventbrite_subuser_email'])) {
              form_set_error('eventbrite_subuser', t('You must select a subuser for the group account to enable Eventbrite integration.'));
            }
            if ($subuser = eventbrite_subuser_load($form_values['eventbrite_subuser_email'], 'email')) {
              if (!eventbrite_get('user_get_by_key', $subuser->user_key)) {
                form_set_error('eventbrite_subuser', t('The Eventbrite API is not authenticating that subuser.'));
                return;
              }
            }
            else {
              form_set_error('eventbrite_subuser', t('The email you entered does not match any subuser accounts.'));
            }
            // TODO: Test that at least one organizer is enabled for this subuser group
            // $form_values['eventbrite_enabled_organizers'];
          }
        }
      }
      else {
        // TODO: Set an error here, chosen method does not match available methods
      }
    }

    if (isset($form_values['eventbrite_payment_settings'])) {
      module_load_include('inc', 'eventbrite', 'eventbrite.payment');

      $form_errors = eventbrite_payment_settings_errors($form_values['eventbrite_og_payment_settings']);
      foreach ($form_errors as $form_element => $error_msg) {
        form_set_error($form, $error_msg);
      }
    }

  }
}

function _eventbrite_og_group_submit($node) {
  $eventbrite_og = array(
    'nid' => $node->nid,
    'eventbrite_og_enabled' => EVENTBRITE_OG_DISABLED,
    'eventbrite_og_user_key' => '',
    'eventbrite_og_enabled_organizers' => array(),
    'eventbrite_og_enabled_venues' => array(),
    'eventbrite_og_default_payment_settings' => array(),
  );

  if ($node->eventbrite_og_enabled) {
    if ($allowed_auth_methods = variable_get('eventbrite_og_auth_method_' . $node->type, array())) {
      if (isset($allowed_auth_methods[$node->eventbrite_og_enabled])) {
        if (EVENTBRITE_OG_CUSTOM == $node->eventbrite_og_enabled) {
          $eventbrite_og['eventbrite_og_user_key'] = $node->eventbrite_og_user_key;
          $eventbrite_og['eventbrite_og_enabled'] = EVENTBRITE_OG_CUSTOM;
          // If there is a group context, fetch or
        }
        if (EVENTBRITE_OG_SUBUSER == $node->eventbrite_og_enabled) {
          if (module_exists('eventbrite_subuser')) {
            if ($subuser = eventbrite_subuser_load($node->eventbrite_subuser_email, 'email')) {
              $eventbrite_og['eventbrite_og_user_key'] = $subuser->user_key;
              $eventbrite_og['eventbrite_og_enabled'] = EVENTBRITE_OG_SUBUSER;
//              $eventbrite_og['eventbrite_og_enabled_organizers'] = array();
//              $eventbrite_og['eventbrite_og_enabled_venues'] = array();
            }
          }
        }
      }
    }

    if (isset($node->eventbrite_payment_settings)) {
      $eventbrite_og['default_payment_settings'] = serialize(eventbrite_payment_get_settings($node));
    }
  }

  // Need to check if there is a row here already
  $result = db_query('SELECT * FROM {eventbrite_og} WHERE nid = :nid', array(':nid' => $node->nid));
  if ($db_row = db_fetch_object($result)) {
    drupal_write_record('eventbrite_og', $eventbrite_og, array('nid'));
  }
  else {
    drupal_write_record('eventbrite_og', $eventbrite_og);
  }
}

/**
 * Implements hook_field_access().
 *
 * IF there is a group context and IF Eventbrite has not been enabled for this group,
 *   then boot the field
 */
function eventbrite_og_field_access($op, $field, $account, $node = NULL) {
  if ($field['type'] == 'eventbrite_cck') {
    switch ($op) {
      case 'view':
      case 'edit':
        // Check if there is a group context
        if (og_is_group_post_type($node->type) && ($group_node = og_context($node->type))) {
          $allowed_auth_methods = variable_get('eventbrite_og_auth_method_' . $group_node->type, array());
          if (empty($allowed_auth_methods)) {
            // Do not show this field if the group type has not been Eventbrite enabled.
            return FALSE;
          }
          if (!$group_node->eventbrite_og_enabled) {
            // Do not show this field if the group node has not been Eventbrite enabled.
            return FALSE;
          }
        }
    }
  }
  return TRUE;
}

/**
 * Implements hook_eventbrite_request_alter(&$request)().
 */
function eventbrite_og_eventbrite_request_alter(&$request) {
  // Check if there is a group context
  if ($group_node = og_context()) {
    // Check which method of auth is being used for this group
    if ($group_node->eventbrite_og_enabled) {
      switch ($group_node->eventbrite_og_enabled) {
        case EVENTBRITE_OG_CUSTOM:
          switch ($request->op) {
            case 'user_list_events':
            case 'event_get':
            case 'event_new':
            case 'event_update':
            case 'payment_update':
            case 'ticket_new':
            case 'ticket_update':
            case 'user_list_venues':
            case 'user_list_organizers':
            case 'venue_new':
            case 'venue_update':
              $request->module = 'eventbrite_og';
              $request->user_key = $group_node->eventbrite_og_user_key;
              break;
            default:
              // Don't make replacements if the $request->op didn't match the list
          }
          break;
        case EVENTBRITE_OG_SUBUSER:
          switch ($request->op) {
            case 'user_list_events':
            case 'event_get':
            case 'event_new':
            case 'event_update':
            case 'payment_update':
            case 'ticket_new':
            case 'ticket_update':
            case 'user_list_venues':
            case 'user_list_organizers':
            case 'venue_update':
              $request->module = 'eventbrite_og';
              $request->user_key = $group_node->eventbrite_og_user_key;
              break;
            default:
              // Don't make replacements if the $request->op didn't match the list
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_eventbrite_default_payment_settings().
 */
function eventbrite_og_eventbrite_default_payment_settings() {
  // Check if there is a group context
  if ($group_node = og_context()) {
    // Check if this group has had Eventbrite functionality enabled
    if ($group_node->eventbrite_og_enabled) {
      return $group_node->eventbrite_og_default_payment_settings;
    }
  }
}

/**
 * Implements hook_eventbrite_venue_new($venue)().
 */
function eventbrite_og_eventbrite_venue_new($venue) {
  // Check if there is a group context
  if ($group_node = og_context()) {
    // Check if this group has had Eventbrite functionality enabled
    if (EVENTBRITE_OG_SUBUSER == $group_node->eventbrite_og_enabled) {
      // This is a subuser group.  Venue should be added to subusers enabled venues
      eventbrite_subuser_enable_venue($group_node->eventbrite_og_user_key, $venue->venue_id);
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_og_get_enabled_organizers($group_node) {
  switch ($group_node->eventbrite_og_enabled) {
    case EVENTBRITE_OG_CUSTOM:
      // If there is no group context, set it--it is needed to get custom organizers from Eventbrite
      if (!og_context()) {
        og_set_group_context($group_node);
      }
      if ($custom_organizers = eventbrite_get('user_list_organizers')) {
        return array_keys($custom_organizers);
      }
      break;
    case EVENTBRITE_OG_SUBUSER:
      if (module_exists('eventbrite_subuser')) {
        // TODO: Fill in organizer from subuser
        $subuser = eventbrite_subuser_load($group_node->eventbrite_og_user_key, 'user_key');
        return $subuser->enabled_organizers;
      }
      break;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_og_get_enabled_venues($group_node) {
  switch ($group_node->eventbrite_og_enabled) {
    case EVENTBRITE_OG_CUSTOM:
      // If there is no group context, set it--it is needed to get custom venues from Eventbrite
      if (!og_context()) {
        og_set_group_context($group_node);
      }
      if ($custom_venues = eventbrite_get('user_list_venues')) {
        return array_keys($custom_venues);
      }
      break;
    case EVENTBRITE_OG_SUBUSER:
      if (module_exists('eventbrite_subuser')) {
        // TODO: Fill in venues from subuser
        $subuser = eventbrite_subuser_load($group_node->eventbrite_og_user_key, 'user_key');
        return $subuser->enabled_venues;
      }
      break;
  }
}

