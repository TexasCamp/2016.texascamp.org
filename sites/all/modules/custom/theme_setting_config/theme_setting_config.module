<?php
/**
 * @return mixed
 * Hook_menu
 */

function theme_setting_config_menu(){
    $items['theme_setting_config/tweet'] = array(
        'title' => t('Twitter Feed'),
        'description' => t('Display lastest tweet of twitter account'),
        'page callback' => 'tweet_content',
        'access callback' => true,
        'access arguments' => array('access content'),
    );
    return $items;
}

/**
 * Implement hook_block_info() 
 */
function theme_setting_config_block_info() {
  $blocks['twitter'] = array(
        'info'  => t('BS Footer Twitter Block'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
  return $blocks;
}



/**
 * Implement hook_block_view($delta = '') 
 */
function theme_setting_config_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'twitter':
            $block['subject'] = 'Twitter Block';
            $block['content'] = _post_twitter_block_content();
            break;  
  }
  return $block;
}


function theme_setting_config_block_configure($delta = '') {
    $form = array();
    switch($delta) {
        case 'twitter' :
            // Text field form element
            $form['twitter_settings'] = array(
                '#type' => 'fieldset',
                '#title' => t('Twitter Account Settings'),
                '#description' => 'Modify your data from Twitter account',
                '#weight'   => 15
            );
            $form['twitter_settings']['twitter_username'] = array(
                '#type' => 'textfield',
                '#title'    =>  t('Twitter username'),
                '#size'         => '15',
                '#required'      => true,
                '#default_value'    => variable_get('twitter_username','')
            );
            $form['twitter_settings']['twitter_link'] = array(
                '#type'     => 'textfield',
                '#title'    => t('Tweets Link'),
                '#size'     => '25',
                '#required'      => true,
                '#default_value'    => variable_get('twitter_link',''),
            );
            $form['twitter_settings']['twitter_num'] = array(
                '#type'     => 'textfield',
                '#title'    => t('Tweets Posts'),
                '#size'     => '5',
                '#default_value'    => variable_get('twitter_num',''),
            );
            $form['twitter_settings']['twitter_consumer_key'] = array(
                '#type' => 'textfield',
                '#title' => t('Consumer key'),
                '#description' => t('Enter your consumer key from your twitter app'),
                '#maxlength' => '50',
                '#default_value' => variable_get('twitter_consumer_key', ''),
            );
            $form['twitter_settings']['twitter_consumer_secret'] = array(
                '#type' => 'textfield',
                '#title' => t('Consumer secret'),
                '#description' => t('Enter your consumer secret string from your twitter app'),
                '#maxlength' => '50',
                '#default_value' => variable_get('twitter_consumer_secret', ''),
            );
            $form['twitter_settings']['twitter_access_token'] = array(
                '#type' => 'textfield',
                '#title' => t('Access Token'),
                '#description' => t('Enter your access token string from your twitter app'),
                '#maxlength' => '50',
                '#default_value' => variable_get('twitter_access_token', ''),
            );
            $form['twitter_settings']['twitter_access_token_secret'] = array(
                '#type' => 'textfield',
                '#title' => t('Access Token Secret'),
                '#description' => t('Enter your access token secret string from your twitter app'),
                '#maxlength' => '50',
                '#default_value' => variable_get('twitter_access_token_secret', ''),
            );
            break;
    }
    return $form;

}



/**
 * Implements theme_setting_config_block_save().
 * Save data
 */
function theme_setting_config_block_save($delta = '', $edit = array()) {
    switch($delta) {
        case 'twitter' :
            // Saving the user input twitter data
            variable_set('twitter_username', $edit['twitter_username']);
            variable_set('twitter_link', $edit['twitter_link']);
            variable_set('twitter_num', $edit['twitter_num']);
            variable_set('twitter_consumer_key', $edit['twitter_consumer_key']);
            variable_set('twitter_consumer_secret', $edit['twitter_consumer_secret']);
            variable_set('twitter_access_token', $edit['twitter_access_token']);
            variable_set('twitter_access_token_secret', $edit['twitter_access_token_secret']);
            break;
    }
}


/**
 * Twitter Block Content
 */
function _post_twitter_block_content() {
    $twitter_account = variable_get('twitter_username');
    $twitter_max = variable_get('twitter_num');
    $twitter_href = variable_get('twitter_link');
    if(isset($twitter_account) && isset($twitter_max)){
        drupal_add_js(array('twitter_account'=>$twitter_account),'setting');
        drupal_add_js(array('twitter_num'=>$twitter_max),'setting');
        drupal_add_js(drupal_get_path('module', 'theme_setting_config') . '/js/jquery.tweet.js');
    }
    $content = '<div data-interval="12000" data-limit="3" data-id="'.$twitter_account.'" class="footer-twitter m-paginated">
                    <div class="footer-twitter-inner">
                            <i class="ico fa fa-twitter"></i>
                            <h4 class="twitter-title"><a href='.$twitter_href.'>@'.$twitter_account.'</a></h4>
                            <div class="twitter-feed"></div>
                    </div>
                </div>
                        
            ';
    return $content;
}
/**
 * Get json data from twitter with OAuth library
 */
function tweet_content(){
    $consumer_key = variable_get('twitter_consumer_key');

    $consumer_secret = variable_get('twitter_consumer_secret');

    $access_token = variable_get('twitter_access_token');

    $secret_token = variable_get('twitter_access_token_secret');

    if(empty($consumer_key) || empty($consumer_secret) || empty($access_token) || empty($secret_token)) { die(); }
    class ezTweet {
        /*************************************** config ***************************************/

        // Path to tmhOAuth libraries
        private $lib = './lib/';

        // Enable caching
        private $cache_enabled = false;

        // Cache interval (minutes)
        private $cache_interval = 15;

        // Path to writable cache directory
        private $cache_dir = './cache';

        // Enable debugging
        private $debug = true;

        /**************************************************************************************/

        public function __construct() {
            // Initialize paths and etc.
            $this->pathify($this->cache_dir);
            $this->pathify($this->lib);
            $this->message = '';

            // Set server-side debug params
            if($this->debug === true) {
                error_reporting(-1);
            } else {
                error_reporting(0);
            }
        }

        public function fetch() {
            echo json_encode(
                array(
                    'response' => json_decode($this->getJSON(), true),
                    'message' => ($this->debug) ? $this->message : false
                )
            );

        }

        private function getJSON() {
            if($this->cache_enabled === true) {
                $CFID = $this->generateCFID();
                $cache_file = $this->cache_dir.$CFID;

                if(file_exists($cache_file) && (filemtime($cache_file) > (time() - 60 * intval($this->cache_interval)))) {
                    return file_get_contents($cache_file, FILE_USE_INCLUDE_PATH);
                } else {

                    $JSONraw = $this->getTwitterJSON();
                    $JSON = $JSONraw['response'];

                    // Don't write a bad cache file if there was a CURL error
                    if($JSONraw['errno'] != 0) {
                        $this->consoleDebug($JSONraw['error']);
                        return $JSON;
                    }

                    if($this->debug === true) {
                        // Check for twitter-side errors
                        $pj = json_decode($JSON, true);
                        if(isset($pj['errors'])) {
                            foreach($pj['errors'] as $error) {
                                $message = 'Twitter Error: "'.$error['message'].'", Error Code #'.$error['code'];
                                $this->consoleDebug($message);
                            }
                            return false;
                        }
                    }

                    if(is_writable($this->cache_dir) && $JSONraw) {
                        if(file_put_contents($cache_file, $JSON, LOCK_EX) === false) {
                            $this->consoleDebug("Error writing cache file");
                        }
                    } else {
                        $this->consoleDebug("Cache directory is not writable");
                    }
                    return $JSON;
                }
            } else {
                $JSONraw = $this->getTwitterJSON();

                if($this->debug === true) {
                    // Check for CURL errors
                    if($JSONraw['errno'] != 0) {
                        $this->consoleDebug($JSONraw['error']);
                    }

                    // Check for twitter-side errors
                    $pj = json_decode($JSONraw['response'], true);
                    if(isset($pj['errors'])) {
                        foreach($pj['errors'] as $error) {
                            $message = 'Twitter Error: "'.$error['message'].'", Error Code #'.$error['code'];
                            $this->consoleDebug($message);
                        }
                        return false;
                    }
                }
                return $JSONraw['response'];
            }
        }

        private function getTwitterJSON() {
            $path = drupal_get_path('module','theme_setting_config');
            include_once($path.'/twitter/lib/tmhOAuth.php');
            include_once($path.'/twitter/lib/tmhUtilities.php');


            $tmhOAuth = new tmhOAuth(array(
                'host'                  => $_POST['request']['host'],
                'consumer_key'          => variable_get('twitter_consumer_key'),
                'consumer_secret'       => variable_get('twitter_consumer_secret'),
                'user_token'            => variable_get('twitter_access_token'),
                'user_secret'           => variable_get('twitter_access_token_secret'),
                'curl_ssl_verifypeer'   => false
            ));

            $url = $_POST['request']['url'];
            $params = $_POST['request']['parameters'];

            $tmhOAuth->request('GET', $tmhOAuth->url($url), $params);
            return $tmhOAuth->response;
        }

        private function generateCFID() {
            // The unique cached filename ID
            return md5(serialize($_POST)).'.json';
        }

        private function pathify(&$path) {
            // Ensures our user-specified paths are up to snuff
            $path = realpath($path).'/';
        }

        private function consoleDebug($message) {
            if($this->debug === true) {
                $this->message .= 'tweet.js: '.$message."\n";
            }
        }
    }

    $ezTweet = new ezTweet();
    $ezTweet->fetch();
}


/**
 * @param $theme_registry
 * hook_theme_registry_alter
 */
function theme_setting_config_theme_registry_alter(&$theme_registry) {
    if (!empty($theme_registry['form_element'])) {
        $theme_registry['form_element']['function'] = 'theme_setting_config_form_element';
    }
}

function theme_setting_config_form_element($variables) {
    $element = &$variables['element'];
    // This function is invoked as theme wrapper, but the rendered form element
    // may not necessarily have been processed by form_builder().
    $element += array(
        '#title_display' => 'before',
    );

    // Add element #id for #type 'item'.
    if (isset($element['#markup']) && !empty($element['#id'])) {
        $attributes['id'] = $element['#id'];
    }
    // Add element's #type and #name as class to aid with JS/CSS selectors.
    $attributes['class'] = array('form-item');
    if (!empty($element['#type'])) {
        $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
    }
    if (!empty($element['#name'])) {
        $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
    }
    // Add a class for disabled elements to facilitate cross-browser styling.
    if (!empty($element['#attributes']['disabled'])) {
        $attributes['class'][] = 'form-disabled';
    }
    $output = '<div' . drupal_attributes($attributes) . '><div class="form-elements">' . "\n";

    // If #title is not set, we don't display any label or required marker.
    if (!isset($element['#title'])) {
        $element['#title_display'] = 'none';
    }
    $prefix = isset($element['#field_prefix']) ? '' . $element['#field_prefix'] . '' : '';
    $suffix = isset($element['#field_suffix']) ? '' . $element['#field_suffix'] . '' : '';

    switch ($element['#title_display']) {
        case 'before':
        case 'invisible':
            $output .= ' ' . theme('form_element_label', $variables);
            $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
            break;

        case 'after':
            $output .= ' ' . $prefix . $element['#children'] . $suffix;
            $output .= ' ' . theme('form_element_label', $variables) . "\n";
            break;

        case 'none':
        case 'attribute':
            // Output no label and no required marker, only the children.
            $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
            break;
    }

    if (!empty($element['#description'])) {
        $output .= '<div class="description">' . $element['#description'] . "</div>\n";
    }

    $output .= "</div></div>\n";

    return $output;
}

